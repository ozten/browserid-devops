# TODO validate that this is what Zeus does
server {
    listen 80;
    server_name _;
    rewrite ^(.*) https://webhead.intcluster.mozilla.com$1 permanent;
}

#TODO Remove server wrapping
server {

    # TODO Zeus does SSL, but we'll do in webhead nginx???
    listen 443;
    server_name webhead.intcluster.mozilla.com;

    ssl on;
    ssl_certificate /etc/pki/tls/certs/webhead.intcluster.mozilla.com.crt;
    ssl_certificate_key /etc/pki/tls/private/webhead.intcluster.mozilla.com.key;

# do not expose to public
location /code_update {
    allow 127.0.0.0/8;
    deny all;
}
location /verify/code_update {
    allow 127.0.0.0/8;
    deny all;
}

# verifier
location = /verify {
    proxy_set_header X-Real-IP $proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:62800;
}
location = /verify/__heartbeat__ {
    rewrite /verify/__heartbeat__ /__heartbeat__ break;
    proxy_set_header X-Real-IP $proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:62800;
}

# main server
# the main server is normally accessed via the router process
# here the heartbeat is being forwarded explicitly to enable
# monitoring of the browserid process directly (not through
# the router)
location = /browserid/__heartbeat__ {
    rewrite /browserid/__heartbeat__ /__heartbeat__ break;
    proxy_set_header X-Real-IP $proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:62700;
}

# router
location / {
    rewrite ^/production/dialog.js$ https://$host/production/en_US/dialog.js redirect;

    proxy_set_header X-Real-IP $proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:63300;

    gzip on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_proxied any;
    gzip_types text/html application/javascript text/css application/x-font-ttf;
}

#TODO Remove
}